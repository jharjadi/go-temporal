version: "3.5"
services:
  pubsub-emulator:
    profiles: ["pubsub"]
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
    command: gcloud beta emulators pubsub start --host-port=0.0.0.0:8085
    environment:
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      NO_PROXY: ""
      https_proxy: ""
      http_proxy: ""
      PUBSUB_EMULATOR_HOST: "pubsub-emulator:8085"
    ports:
      - "8085:8085"


  spanner:
    profiles: [ "spanner" ]
    container_name: spanner
    image: hub.artifactory.gcp.anz/roryq/spanner-emulator:${SPANNER_EMULATOR_VERSION:-1.5.13}
    environment:
      SPANNER_PROJECT_ID: ${SPANNER_PROJECT:-tms-cmt-local}
      SPANNER_INSTANCE_ID: ${SPANNER_INSTANCE:-cmt-local}
      SPANNER_DATABASE_ID: ${SPANNER_DATABASE:-cmt}
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      NO_PROXY: ""
      https_proxy: ""
      http_proxy: ""
    ports:
      - "9010:9010"
      - "9020:9020"

  spanner-health-check:
    profiles: [ "spanner" ]
    container_name: "spanner-health-check"
    image: hub.artifactory.gcp.anz/curlimages/curl:8.5.0
    depends_on:
      - spanner
    healthcheck:
      test: |
        curl --fail http://spanner:9020/v1/projects/${SPANNER_PROJECT:-tms-cmt-local}/instances/${SPANNER_INSTANCE:-cmt-local}/databases/${SPANNER_DATABASE:-cmt}
      timeout: 10m
      interval: 1s
      retries: 10
    environment:
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      NO_PROXY: ""
      https_proxy: ""
      http_proxy: ""
    entrypoint: |
      tail -f /dev/null
  
  

  elasticsearch:
    container_name: temporal-elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    networks:
      - temporal-network
    expose:
      - 9200
    volumes:
      - /var/lib/elasticsearch/data
  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:${POSTGRESQL_VERSION}
    networks:
      - temporal-network
    expose:
      - 5432
    volumes:
      - /var/lib/postgresql/data
  temporal:
    container_name: temporal
    depends_on:
      - postgresql
      - elasticsearch
    environment:
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - http_proxy=
      - https_proxy=
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    networks:
      - temporal-network
    ports:
      - 7233:7233
    labels:
      kompose.volume.type: configMap
    volumes:
      - ./docker/dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    networks:
      - temporal-network
    stdin_open: true
    tty: true
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - http_proxy=
      - https_proxy=
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    networks:
      - temporal-network
    ports:
      - 8080:8080
networks:
  temporal-network:
    driver: bridge
    name: temporal-network